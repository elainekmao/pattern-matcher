(defun match (p d)
(rpm p d nil))

(defun rpm (p d a)
  (cond
   ((and (null p)(null d)) 
    (cond (a a) 
          (t t)))
   ((and (or (null p) (null d)) (not (or (equal '* (first p)) (equal '* (first d))))) nil)
   ((is-vbl (first p)) 
    (cond ((assoc (first p) a)
           (cond ((equal (first d) (cdr (assoc (first p) a)))
                  (rpm (rest p) (rest d) a))

                 (t
                  (cond ((not (null (rest p)))
                         (cond ((equal '* (first (rest p)))
                                (let ((newd d))
                                  (cond ((and (not (null (rpm (rest p) (rest newd) a))) (not (null (rest newd))))
                                         (rpm p (rest newd) (cons (list (first p) (first newd)) a)))
                                        (t (rpm (rest p) (rest newd) (cons (list (first p) (first newd)) a))))))
                               (t (rpm (rest p) (rest d) (cons (list (first p) (first d)) a)))))
                        (t nil)))))
          (t
           (cond ((not (null (rest p)))
                  (cond ((equal '* (first (rest p)))
                         (let ((newd d))
                           (cond ((and (not (null (rpm (rest p) (rest newd) a))) (not (null (rest newd))))
                                  (rpm p (rest newd) (cons (list (first p) (first newd)) a)))
                                 (t (rpm (rest p) (rest newd) (cons (list (first p) (first newd)) a))))))
                        (t (rpm (rest p) (rest d) (cons (list (first p) (first d)) a)))))
                 (t (rpm (rest p) (rest d) (cons (list (first p) (first d)) a)))))))
    ((equal '? (first p))
     (rpm (rest p) (rest d) a))
    ((equal '* (first p))
     (or (rpm (rest p) d a)
         (rpm p (rest d) a)))
    ((atom (first p))
     (cond ((eql (first p) (first d)) (rpm (rest p) (rest d) a))
           (t nil)))
    (t 
     (cond ((and (listp p) (listp d))
            (let ((newa (rpm (first p) (first d) a)))
                (cond ((null newa) nil)
                      ((listp newa) (rpm (rest p) (rest d) newa))
                      (t (rpm (rest p) (rest d) nil)))))
           (t nil)))))

(defun is-vbl (x)
  (cond ((numberp x) nil)
        ((listp x) nil)
        (t (and (equal #\? (char (string x) 0)) (> (length (string x)) 1)))))